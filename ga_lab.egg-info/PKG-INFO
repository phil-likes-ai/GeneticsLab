Metadata-Version: 2.4
Name: ga-lab
Version: 0.1.0
Summary: Standalone multi-generation genetic-algorithm laboratory
Author-email: Your Name <you@example.com>
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: pandas>=2.0
Requires-Dist: numpy>=1.25
Requires-Dist: pandas-ta

# GA-Lab – Standalone Multi-Generation Genetic-Algorithm Laboratory

Uncovers profitable indicator parameter sets through evolution.

---

## Table of Contents

1. [Features](#features)
2. [Quick Start](#quick-start)
3. [Installation](#installation)
4. [Project Structure](#project-structure)
5. [Configuration](#configuration)
6. [SQLite Schema](#sqlite-schema)
7. [CLI Usage](#cli-usage)
8. [Inputs & Outputs](#inputs--outputs)
9. [Development Work-flow](#development-work-flow)
10. [Testing / Quality Gates](#testing--quality-gates)
11. [Advanced Topics](#advanced-topics)

## Features

* **Multi-generation GA** with tournament selection, single-point crossover, mutation, elitism.  
* **Strict type-safety** (`mypy --strict`) and PEP 8 clean (relaxed line-length).  
* **Self-contained JSON config** – no environment or bot dependencies.  
* **SQLite persistence** for **`candles`** input & **`ga_strategies`** output.  
* Uses **pandas-ta** for indicator calculation; easily extended.  

---

## Quick Start

```bash
git clone https://github.com/your-org/ga-lab.git
cd ga-lab

# one-liner:
./setup.sh              # creates .venv & installs deps

# import your historical OHLCV (example CSV → SQLite):
sqlite3 ga_lab.db ".read schema.sql"
csvsql --insert --db sqlite:///ga_lab.db --tables candles candles_btcusdt.csv  # any loader works

# evolve on 50k candles
. .venv/bin/activate
ga-lab --db ga_lab.db --symbol BTCUSDT --limit 50000
````

Output:

```bash
Best: 9e1d7d2b 1423.55
```

---

## Installation

### Editable (dev) mode

```bash
python -m venv .venv && . .venv/bin/activate
pip install -e ".[dev]"     # prod + black/flake8/mypy
```

### PyPI-style

```bash
pip install ga-lab
```

---

## Project Structure

```bash
ga_lab/
    __init__.py            public API
    cli.py                 entry-point (ga-lab)
    config.py              JSON-backed Config + require()
    constants.py           GA constant tables
    database.py            SQLite helper (candles + strategies)
    indicators.py          pandas-ta wrapper
    strategy.py            GeneticStrategy dataclass
    manager.py             GeneticAlgorithmManager (core GA)
    __main__.py            enables `python -m ga_lab`
config.json                default GA ranges / parameters
schema.sql                 reproducible DB schema
.flake8                    relaxed lint rules
mypy.ini                   strict static-type config
pyproject.toml             build + tooling
requirements*.txt          runtime & dev deps
README.md                  this file
```

---

## Configuration

*Edit `config.json`*

```jsonc
{
  "genetic_algorithm": {
    "parameters": {          // meta GA behaviour
      "population_size": 30,
      "mutation_rate": 0.15,
      ...
    },
    "param_ranges": {        // indicator param boundaries
      "rsi_length": [8, 20],
      ...
    },
    "threshold_ranges": {    // buy/sell/SL/TP thresholds
      "rsi_oversold": [20, 35],
      ...
    },
    "weight_ranges": {       // indicator weights (0-1)
      "rsi": [0.1, 1.0],
      ...
    }
  }
}
```

---

## SQLite Schema

```sql
-- candles: unlimited historic OHLCV
CREATE TABLE candles(
    ts INTEGER,             -- unix ms / s
    symbol TEXT,            -- e.g. BTCUSDT
    open REAL, high REAL, low REAL, close REAL, volume REAL,
    PRIMARY KEY (ts, symbol)
);
-- ga_strategies: persisted GA results
CREATE TABLE ga_strategies(
    id TEXT PRIMARY KEY,
    generation INTEGER,
    fitness REAL,
    params TEXT, thresholds TEXT, weights TEXT,
    win_rate REAL, profit_factor REAL, trades INTEGER
);
```

Populate `candles` via *any* method (CSV import, API sync, etc.).

---

## CLI Usage

```bash
ga-lab --help
```

| Flag       | Default       | Description                            |
| ---------- | ------------- | -------------------------------------- |
| `--db`     | `ga_lab.db`   | SQLite file path                       |
| `--config` | `config.json` | Alternate JSON config                  |
| `--symbol` | *None*        | Filter candles by symbol (optional)    |
| `--limit`  | *None*        | Cap candle rows for faster experiments |

---

## Inputs & Outputs

### Inputs

* SQLite\*\*`candles`\*\* rows – at least *open, high, low, close, volume* per timestamp.
* `config.json` – ranges & GA meta-settings.

### Outputs

* **Console log** – per-generation best fitness + final best strategy.
* SQLite **`ga_strategies`** – top 20 (default) persisted with full JSON blobs:

  ```json
  {
    "id": "9e1d7d2b",
    "generation": 10,
    "fitness": 1423.55,
    "params": {"rsi_length": 14, ...},
    "thresholds": {"buy_strength": 0.55, ...},
    "weights": {"rsi": 0.9, ...},
    "win_rate": 0.61,
    "profit_factor": 2.74,
    "trades": 183
  }
  ```

---

## Development Work-flow

```bash
# lint
flake8 ga_lab

# type-check
mypy ga_lab

# format
black ga_lab

# run evolution on sample data
python -m ga_lab.cli --db ga_lab.db --symbol BTCUSDT --limit 30000
```

---

## Testing / Quality Gates

| Tool       | Command               | Gate               |
| ---------- | --------------------- | ------------------ |
| **Black**  | `black -l 120 ga_lab` | formatting         |
| **Flake8** | `flake8 ga_lab`       | lint (see .flake8) |
| **MyPy**   | `mypy ga_lab`         | strict type safety |

All code passes *mypy --strict* and lint under the relaxed rule-set.

---

## Advanced Topics

* **Custom Indicators**: add new functions in `indicators.py` and reference their column names in `strategy.evaluate()`.
* **Alternative Fitness**: modify `_simulate()` in `manager.py` to include risk-adjusted metrics.
* **Parallel Evolution**: wrap `manager.evolve()` inside multiprocessing pools for multi-symbol training.
