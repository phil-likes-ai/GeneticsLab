Metadata-Version: 2.4
Name: ga-lab
Version: 0.1.0
Summary: Standalone multi-generation genetic-algorithm laboratory
Author-email: Your Name <you@example.com>
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: pandas>=2.0
Requires-Dist: numpy>=1.25
Requires-Dist: pandas-ta

# GA-Lab – A Standalone Genetic Algorithm Laboratory for Trading Strategies

GA-Lab is a powerful, standalone tool for discovering, analyzing, and backtesting indicator-based trading strategies using a genetic algorithm. It provides a complete end-to-end workflow from data acquisition to strategy analysis.

---

## Table of Contents

1.  [Features](#features)
2.  [Setup and Installation](#setup-and-installation)
3.  [End-to-End Workflow](#end-to-end-workflow)
4.  [CLI Command Reference](#cli-command-reference)
5.  [Configuration Files](#configuration-files)
6.  [Advanced GA Features](#advanced-ga-features)
7.  [Schema and Migration Notes](#schema-and-migration-notes)
8.  [Development](#development)

---

## Features

*   **Genetic Algorithm Core**: Multi-generation GA with tournament selection, configurable crossover (uniform/one-point/blend), configurable mutation (gaussian/step), and elitism.
*   **Adaptive Evolution**: Adaptive mutation decay and early-stopping by stagnation to improve convergence speed.
*   **Dynamic Indicators**: Indicators are computed dynamically from each strategy’s parameters (e.g., RSI length, MACD triplet, EMAs), aligning evaluation signal features to the evolving genotype.
*   **Parallel Evaluation**: Optional multiprocessing speeds up population fitness evaluation.
*   **Flexible Data Pipeline**: Ingests historical candle data from any `ccxt`-supported exchange using a simple configuration file.
*   **Robust Backtesting**: Timeframe-aware backtesting; equity plot baseline fixed to initial equity and standardized plot filename output.
*   **Insightful Reporting**: Generates detailed HTML analysis reports with multiple visualizations (heatmaps, 3D scatter plots, etc.).
*   **SQLite Backend**: Simple and portable SQLite database for candles and evolved strategies, with consistent schema and automatic legacy migration.
*   **High-Quality Codebase**: Strict type-safety (`mypy --strict`) and clean code standards.

---

## Setup and Installation

Follow these steps to set up your local environment.

```bash
# 1. Clone the repository
git clone https://github.com/your-org/ga-lab.git
cd ga-lab

# 2. Create a Python virtual environment
python3 -m venv venv

# 3. Activate the virtual environment
source venv/bin/activate

# 4. Install packages
pip install -e ".[dev]"
```

After these steps, your environment is ready.

---

## End-to-End Workflow

Here is the recommended workflow for using GA-Lab:

### Step 1: Configure Your Data

Edit `data_config.json` to define which markets and timeframes you want to analyze.

```json
{
  "defaults": { "since": "2023-01-01" },
  "markets": [
    {
      "exchange": "binance",
      "symbol": "BTC/USDT",
      "timeframes": ["5m", "1h", "4h"]
    }
  ]
}
```

### Step 2: Fetch Market Data

```bash
python3 -m ga_lab.cli fetch-data --all
```

### Step 3: Evolve Strategies

```bash
python3 -m ga_lab.cli evolve --symbol BTC/USDT --timeframe 1h
```

### Step 4: Analyze the Results

```bash
python3 -m ga_lab.cli analyze --limit 50 --visualize --report
```

Saves report to `analysis_plots/strategy_report.html`.

### Step 5: Backtest a Specific Strategy

```bash
python3 -m ga_lab.cli backtest --strategy-id <id> --symbol BTC/USDT --timeframe 1h --plot
```

---

## CLI Command Reference

Run with `python3 -m ga_lab.cli <command>`.

### 1. `fetch-data`
Downloads historical candles from `ccxt`.

- All markets defined in config:
  - `fetch-data --all`
- Single market:
  - `fetch-data --symbol <symbol> --timeframe <timeframe> --since <YYYY-MM-DD>`

### 2. `evolve`
Runs the genetic algorithm to find optimal strategies.

- Basic:
  - `evolve --symbol <symbol> --timeframe <timeframe>`
- Uses `config.json` for GA parameters, operator selection, early stopping, and optional parallelism.

### 3. `analyze`
Generates visualizations and HTML reports for top strategies.

- `analyze --limit <n> --visualize --report`

### 4. `backtest`
Runs a backtest for a stored strategy id.

- `backtest --strategy-id <id> --symbol <symbol> --timeframe <timeframe> --plot`

Note: Backtest output includes `plot_file` path.

---

## Configuration Files

- `config.json`: Defines GA parameter ranges, thresholds, indicator weights, operator selection, early stopping, adaptive mutation, and optional parallelism.
- `data_config.json`: Lists exchanges, symbols, and timeframes for `fetch-data --all`.

Minimal `config.json` example with advanced GA knobs:

```json
{
  "simulation": { "initial_balance": 10000 },
  "genetic_algorithm": {
    "parameters": {
      "population_size": 30,
      "mutation_rate": 0.15,
      "crossover_rate": 0.7,
      "elite_size": 4,
      "generations_to_evolve": 10,
      "tournament_k": 5,
      "mutation_step_divisor": 10
    },
    "operators": {
      "crossover": "uniform",
      "mutation": "gaussian"
    },
    "early_stopping": {
      "patience": 8,
      "min_improve": 1e-5
    },
    "mutation_decay": 0.98,
    "param_ranges": {
      "rsi_length": [8, 20],
      "macd_fast": [8, 15],
      "macd_slow": [20, 35],
      "macd_signal": [6, 12],
      "bb_length": [15, 30],
      "bb_std": [1.5, 3.0],
      "ema_short_lengths": [5, 15],
      "ema_long_lengths": [20, 55],
      "stoch_k": [10, 20],
      "stoch_d": [3, 7],
      "stoch_smooth_k": [3, 7],
      "atr_length": [10, 21]
    },
    "threshold_ranges": {
      "rsi_oversold": [20, 35],
      "rsi_overbought": [65, 80],
      "stoch_oversold": [15, 30],
      "stoch_overbought": [70, 85],
      "buy_strength": [0.3, 0.7],
      "sell_strength": [0.3, 0.7],
      "sl_atr_mult": [1.0, 3.0],
      "tp_atr_mult": [1.0, 4.0]
    },
    "weight_ranges": {
      "rsi": [0.1, 1.0],
      "macd": [0.1, 1.0],
      "bollinger": [0.1, 1.0],
      "ema_cross": [0.1, 1.0],
      "stochastic": [0.1, 1.0]
    }
  },
  "parallel": { "workers": 4 }
}
```

---

## Advanced GA Features

This project includes practical, production-ready GA improvements aligned with evolutionary algorithms literature and frameworks like DEAP:

1) Operator Selection
- Crossover (config: `genetic_algorithm.operators.crossover`):
  - `uniform`: gene-wise mixing from two parents.
  - `one_point`: single cut point combine.
  - `blend`: BLX-like for continuous ranges (averaging/expanding range).
- Mutation (config: `genetic_algorithm.operators.mutation`):
  - `gaussian`: perturb float/integer-like genes with range-derived sigma.
  - `step`: resample within bounds or choose from discrete set.

2) Constraints and Range Clipping
- Automatic enforcement of realistic constraints (e.g., `ema_short_len < ema_long_len`).
- All parameters clipped to their configured ranges.

3) Adaptive Mutation and Early Stopping
- Mutation rate decays each generation (`genetic_algorithm.mutation_decay`).
- Early stopping if best fitness does not improve beyond `min_improve` for `patience` generations.

4) Dynamic Indicators
- Indicators are computed dynamically from each strategy’s parameterization (e.g., RSI length, MACD fast/slow/signal, EMA lengths). The GA evaluates against the exact features implied by a genotype.

5) Parallel Evaluation
- Optional multiprocessing. Configure worker count via:
  - `"parallel": { "workers": <int> }`

Planned (optional, not enabled by default)
- Multi-objective selection (NSGA-II/III) with Pareto ranking and crowding distance.
- Backtester realism upgrades (fees, slippage, trade objects) and additional risk metrics.

---

## Schema and Migration Notes

The runtime schema and `schema.sql` are aligned:

- `candles(ts INTEGER, symbol TEXT, timeframe TEXT, open, high, low, close, volume, PRIMARY KEY (ts, symbol, timeframe))`
- Index: `CREATE INDEX IF NOT EXISTS idx_candles_symbol_timeframe_ts ON candles(symbol, timeframe, ts);`

On startup, the app auto-migrates legacy databases that lack `timeframe` or have an old PK:
- Adds the `timeframe` column (defaults to `"1h"` for legacy rows).
- Rebuilds the primary key to `(ts, symbol, timeframe)`.
- Ensures the index exists.

---

## Development

### Setup

```bash
python3 -m venv venv && source venv/bin/activate
pip install -e ".[dev]"
```

### Quality Gates

| Tool       | Command         | Description        |
| ---------- | --------------- | ------------------ |
| **Black**  | `black ga_lab`  | Code formatting    |
| **Flake8** | `flake8 ga_lab` | Linting            |
| **MyPy**   | `mypy ga_lab`   | Strict type safety |

Run all:

```bash
black ga_lab && flake8 ga_lab && mypy ga_lab
```
